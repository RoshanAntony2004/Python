Exercise 8

Aim
To create a Contact Management System that allows users to add, search, and display contact information, using exception handling to manage input errors effectively.
Algorithm
Step 1
:
Start the Program.

Step 2
:
Create the Contact Class for storing name, phone number, and email.

Step 3
:
Create the ContactManager Class for managing contacts

Step 4
:
Get User Input for menu selection.

Step 5
:
Execute user choice for contacts management.

Step 6
:
Handle exceptions in user input

Step 7
:
Display the Result

Step 8
:
Stop the Program.


Program:
class Contact:
    def __init__(self, name, phone_number, email):
        self.name = name
        self.phone_number = phone_number
        self.email = email

    def __str__(self):
        return f"Name: {self.name}, Phone: {self.phone_number}, Email: {self.email}"


class ContactManager:
    def __init__(self):
        self.contacts = []

    def add_contact(self, name, phone_number, email):      
        contact = Contact(name, phone_number, email)
        self.contacts.append(contact)
        print(f"Contact '{name}' added successfully.")

    def search_contact(self, name):
        for contact in self.contacts:
            if contact.name.lower() == name.lower():
                return contact
        return None

    def display_contacts(self):
        if not self.contacts:
            print("No contacts available.")
            return
        print("\nContact List:")
        for contact in self.contacts:
            print(contact)


def main():
    manager = ContactManager()
    while True:
        print("\nContact Management Menu:")
        print("1. Add Contact")
        print("2. Search Contact")
        print("3. Display All Contacts")
        print("4. Exit")

        choice = input("Choose an option (1-4): ")
        try:
            if choice == '1':
                name = input("Enter the contact's name: ")
                phone_number = input("Enter the contact's phone number: ")
                email = input("Enter the contact's email: ")
                manager.add_contact(name, phone_number, email)
            elif choice == '2':
                name = input("Enter the name of the contact to search: ")
                contact = manager.search_contact(name)
                if contact:
                    print(contact)
                else:
                    print(f"Contact '{name}' not found.")
            elif choice == '3':
                manager.display_contacts()
            elif choice == '4':
                print("Exiting the contact management system.")
                break
            else:
                print("Invalid choice. Please select a valid option.")
        except Exception as e:
            print(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
Output

Result
The Contact Management System was successfully developed, enabling easy contact management with an effective error handling mechanism.


Exercise 9
Aim
To develop a data visualization program using the Iris dataset to display various plots using the Matplotlib library.
Algorithm
Step 1
:
Start the Program.

Step 2
:
Import the necessary libraries

Step 3
:
Load the iris Dataset

Step 4
:
Create a Scatter Plot, Line Plot, Box Plots, Bar Plot, Histogram, Pie Chart

Step 5
:
Display all the plots

Step 6
:
Stop the Program.


Program:
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Load the Iris dataset
iris = sns.load_dataset('iris')

# Display the first few rows of the dataset
print(iris.head())

# Basic Plotting: Scatter Plot
plt.figure(figsize=(10, 6))
sns.scatterplot(data=iris, x='sepal_length', y='sepal_width', hue='species', style='species', s=100)
plt.title('Sepal Length vs Sepal Width')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend(title='Species')
plt.grid()
plt.show()

# Customization of Plots: Line Plot (average sepal width by species)
avg_sepal_width = iris.groupby('species')['sepal_width'].mean().reset_index()

plt.figure(figsize=(10, 6))
plt.plot(avg_sepal_width['species'], avg_sepal_width['sepal_width'], marker='o', linestyle='-', color='b')
plt.title('Average Sepal Width by Species')
plt.xlabel('Species')
plt.ylabel('Average Sepal Width (cm)')
plt.grid()
plt.show()

# Subplots: Petal Length and Width
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

sns.boxplot(ax=axes[0], data=iris, x='species', y='petal_length', hue='species', palette='pastel', legend=False)
axes[0].set_title('Boxplot of Petal Length by Species')

sns.boxplot(ax=axes[1], data=iris, x='species', y='petal_width', hue='species', palette='pastel', legend=False)
axes[1].set_title('Boxplot of Petal Width by Species')

plt.tight_layout()
plt.show()

# Bar Plot: Count of Species
plt.figure(figsize=(8, 5))
sns.countplot(data=iris, x='species', hue='species', palette='Set2', legend=False)
plt.title('Count of Iris Species')
plt.xlabel('Species')
plt.ylabel('Count')
plt.show()

# Histogram: Distribution of Sepal Length
plt.figure(figsize=(8, 5))
plt.hist(iris['sepal_length'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Sepal Length')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')
plt.grid()
plt.show()

# Pie Chart: Species Distribution
species_counts = iris['species'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(species_counts, labels=species_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'))
plt.title('Distribution of Iris Species')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# Save a Figure
plt.figure(figsize=(8, 5))
sns.countplot(data=iris, x='species', hue='species', palette='Set2', legend=False)
plt.title('Count of Iris Species')
plt.xlabel('Species')
plt.ylabel('Count')
plt.savefig('iris_species_count.png')
plt.show()

Output

Result
The Data Visualization Program was successfully executed using the Matplotlib library and displayed various plots of the Iris dataset.



Exercise 10
Aim
To develop a data visualization program using the Iris dataset to display various plots using the Seaborn library.
Algorithm
Step 1
:
Start the Program.

Step 2
:
Import the seaborn library

Step 3
:
Load the iris Dataset

Step 4
:
Create a Pair plot, Heatmap, Violin plot, Strip plot

Step 5
:
Display all the plots

Step 6
:
Stop the Program.


Program:
import seaborn as sns
# Load the Iris dataset
iris = sns.load_dataset('iris')

# Display the first few rows of the dataset
print(iris.head())

# Pairplot to visualize relationships between all features
plt.figure(figsize=(10, 6))
sns.pairplot(iris, hue='species', markers=["o", "s", "D"])
plt.suptitle('Pairplot of Iris Dataset', y=1.02)
plt.show()

# Heatmap to visualize the correlation between features
plt.figure(figsize=(8, 6))
correlation = iris.corr(numeric_only=True)  # Only take numeric columns
sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap of Iris Features')
plt.show()

# Violin plot for petal length and width by species
plt.figure(figsize=(10, 6))
sns.violinplot(data=iris, x='species', y='petal_length', hue='species', inner='quartile', legend=False)
plt.title('Violin Plot of Petal Length by Species')
plt.xlabel('Species')
plt.ylabel('Petal Length (cm)')
plt.show()


# Strip plot to show distribution of petal width by species
plt.figure(figsize=(10, 6))
sns.stripplot(data=iris, x='species', y='petal_width', jitter=True, hue='species', legend=False)
plt.title('Strip Plot of Petal Width by Species')
plt.xlabel('Species')
plt.ylabel('Petal Width (cm)')
plt.show()

Output

Result
The Data Visualization Program was successfully executed using the Seaborn library and displayed various plots of the Iris dataset.
